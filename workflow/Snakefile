configfile: "config/config.yaml"

include: "rules/common.smk"
include: "rules/data/clinvar.smk"
include: "rules/data/gwas.smk"
#include: "rules/data/insights.smk"
include: "rules/data/splicing_assay.smk"
include: "rules/data/caqtl.smk"
include: "rules/data/dsqtl.smk"
include: "rules/data/eqtl.smk"
include: "rules/data/gnomad.smk"
include: "rules/data/ldscore.smk"
include: "rules/data/mendelian.smk"
include: "rules/data/omim.smk"
include: "rules/data/sat_mut_mpra.smk"
include: "rules/data/siraj.smk"
include: "rules/features/alphamissense.smk"
include: "rules/features/cadd.smk"
include: "rules/features/caduceus.smk"
include: "rules/features/conservation.smk"
include: "rules/features/dist.smk"
include: "rules/features/enformer.smk"
include: "rules/features/gpn.smk"
include: "rules/features/gpn_msa.smk"
include: "rules/features/grelu.smk"
include: "rules/features/hyenadna.smk"
include: "rules/features/maf.smk"
include: "rules/features/nucleotide_transformer.smk"
include: "rules/model.smk"


rule all:
    input:
        expand(
            "results/dataset/{dataset}/features/{features}.parquet",
            dataset=config["datasets"],
            features=[
                "Enformer_L2",
                "Borzoi_L2",
                "CADD",
                "GPN-MSA_LLR",
                "GPN-MSA_InnerProducts",
                "GPN-MSA_Influence",

                "NucleotideTransformer_LLR",
                "NucleotideTransformer_InnerProducts",

                "GPN_LLR",
                "GPN_InnerProducts",

                "HyenaDNA_LLR",
                "HyenaDNA_InnerProducts",

                "Caduceus_LLR",
                "Caduceus_InnerProducts",
            ],
        )


rule deleteriousness_supervised:
    input:
        expand(
            "results/dataset/{dataset}/metrics/{subset}/{model}.csv",
            dataset=["mendelian_matched_9"],
            subset=config["subsets"],
            model=[
                "CADD.plus.RawScore",
                "Enformer_L2_L2.plus.all",
                "Borzoi_L2_L2.plus.all",

                "GPN-MSA_LLR.minus.score",
                "GPN_LLR.minus.score",
                "NucleotideTransformer_LLR.minus.score",
                "HyenaDNA_LLR.minus.score",
                "Caduceus_LLR.minus.score",

                "GPN-MSA_InnerProduct.minus.score",
                "GPN_InnerProduct.minus.score",
                "NucleotideTransformer_InnerProduct.minus.score",
                "HyenaDNA_InnerProduct.minus.score",
                "Caduceus_InnerProduct.minus.score",
            ],
        ),
        expand(
            "results/dataset/{dataset}/metrics/{subset}/{feature_set}.{classifier}.chrom.csv",
            dataset=["mendelian_matched_9"],
            subset=config["subsets"],
            feature_set=[
                "CADD",
                "Enformer",
                "Borzoi",

                "GPN-MSA_LLR+InnerProducts",
                "NucleotideTransformer_LLR+InnerProducts",
                "GPN_LLR+InnerProducts",
                "HyenaDNA_LLR+InnerProducts",
                "Caduceus_LLR+InnerProducts",

                #"OMIM_Ensemble",
                "OMIM_Ensemble_v2",
            ],
            classifier=[
                "LogisticRegression",
            ]
        ),


rule functionality_supervised:
    input:
        expand(
            "results/dataset/{dataset}/metrics/{subset}/{model}.csv",
            dataset=["gwas_matched_9"],
            subset=config["subsets"],
            model=[
                "CADD.plus.RawScore",
                "Enformer_L2_L2.plus.all",
                "Borzoi_L2_L2.plus.all",

                "GPN-MSA_absLLR.plus.score",
                "GPN_absLLR.plus.score",
                "NucleotideTransformer_absLLR.plus.score",
                "HyenaDNA_absLLR.plus.score",
                "Caduceus_absLLR.plus.score",

                "GPN-MSA_InnerProduct.minus.score",
                "GPN_InnerProduct.minus.score",
                "NucleotideTransformer_InnerProduct.minus.score",
                "HyenaDNA_InnerProduct.minus.score",
                "Caduceus_InnerProduct.minus.score",
            ],
        ),
        expand(
            "results/dataset/{dataset}/metrics/{subset}/{feature_set}.{classifier}.chrom.csv",
            dataset=["gwas_matched_9"],
            subset=config["subsets"],
            feature_set=[
                "CADD",
                "Enformer",
                "Borzoi",

                "GPN-MSA_absLLR+InnerProducts",
                "NucleotideTransformer_absLLR+InnerProducts",
                "GPN_absLLR+InnerProducts",
                "HyenaDNA_absLLR+InnerProducts",
                "Caduceus_absLLR+InnerProducts",

                "Enformer+GPN-MSA+CADD",
            ],
            classifier=[
                "LogisticRegression",
            ]
        ),


rule vep_select_omim_traits:
    input:
        expand(
            "results/dataset/{dataset}/metrics/{subset}/{model}.csv",
            dataset=["mendelian_matched_9"],
            subset=[f"non_missense_AND_{trait}" for trait in select_omim_traits],
            model=[
                "CADD.plus.RawScore",
                "Enformer_L2_L2.plus.all",
                "GPN-MSA_LLR.minus.score",
                "GPN_LLR.minus.score",

                #"GPN-MSA_InnerProduct.minus.score",
                #"GPN-MSA_Influence.plus.score",
                #"GPN_InnerProduct.minus.score",
            ],
        ),


rule vep_select_gwas_traits:
    input:
        expand(
            "results/dataset/{dataset}/metrics/{subset}/{model}.csv",
            dataset=["gwas_matched_9"],
            subset=[f"non_missense_AND_{trait}" for trait in select_gwas_traits],
            model=[
                "CADD.plus.RawScore",
                "Enformer_L2_L2.plus.all",
                "GPN-MSA_absLLR.plus.score",
                "GPN_absLLR.plus.score",

                #"GPN-MSA_InnerProduct.minus.score",
                #"GPN-MSA_Influence.plus.score",
                #"GPN_InnerProduct.minus.score",
            ],
        ),
        #expand(
        #    "results/dataset/{dataset}/metrics/{subset}/{feature_set}.{classifier}.chrom.csv",
        #    dataset=["gwas_matched_9"],
        #    subset=[f"non_missense_AND_{trait}" for trait in select_gwas_traits],
        #    feature_set=[
        #        "CADD",
        #        "Enformer",
        #        "GPN-MSA_absLLR+InnerProducts",
        #        "GPN_absLLR+InnerProducts",
        #        "Enformer+GPN-MSA+CADD",
        #    ],
        #    classifier=[
        #        "LogisticRegression",
        #    ]
        #),


rule eval_alphamissense:
    input:
        expand(
            "results/dataset/{dataset}/metrics/{subset}/{model}.csv",
            dataset=["gwas_matched_9"],
            subset=["defined_alphamissense"],
            model=[
                "AlphaMissense.plus.score",
                "CADD.plus.RawScore",
                "GPN-MSA_absLLR.plus.score",
            ],
        ),


rule functionality_unsupervised:
    input:
        expand(
            "results/dataset/{dataset}/unsupervised_metrics/{subset}/{features}.csv",
            dataset=["gwas_matched_9", "eqtl_matched_1"],
            subset=["all"],
            features=[
                "Enformer_L2_L2",
                "Borzoi_L2_L2",
                "CADD",
                "GPN-MSA_absLLR",
                "NucleotideTransformer_absLLR",
                "GPN_absLLR",
                "HyenaDNA_absLLR",
            ],
        )


rule deleteriousness_unsupervised:
    input:
        expand(
            "results/dataset/{dataset}/unsupervised_metrics/{subset}/{features}.csv",
            dataset=["omim_matched_9"],
            subset=["all"],
            features=[
                "Enformer_L2_L2",
                "Borzoi_L2_L2",
                "CADD",
                "GPN-MSA_LLR",
                "NucleotideTransformer_LLR",
                "GPN_LLR",
                "HyenaDNA_LLR",
                "Caduceus_LLR",
            ],
        )


rule interpretation_omim:
    input:
        expand(
            "results/dataset/{dataset}/unsupervised_metrics/{subset}/{features}.csv",
            dataset=["omim_matched_9"],
            subset=[
                "all",
                "174500",
                "306900",
                "600886",
            ],
            features=[
                "Enformer_L2",
                "Borzoi_L2",
                "CADD",
            ],
        ),
        expand(
            "results/dataset/{dataset}/coefficients/{subset}/{features}.csv",
            dataset=["omim_matched_9"],
            subset=[
                "all",
                "174500",
                "306900",
                "600886",
            ],
            features=[
                "OMIM_Ensemble",
            ],
        ),


rule interpretation_gwas:
    input:
        #expand(
        #    "results/dataset/{dataset}/unsupervised_metrics/{subset}/{features}.csv",
        #    dataset=["gwas_matched_9"],
        #    subset=[
        #        "all",
        #        "Height",
        #        "MCV",
        #        "Mono",
        #        "eBMD",
        #    ],
        #    features=[
        #        "Enformer_L2",
        #        "Borzoi_L2",
        #        "CADD",
        #    ],
        #),
        expand(
            "results/dataset/{dataset}/coefficients/{subset}/{features}.csv",
            dataset=["gwas_matched_9"],
            subset=[
                "all",
                "Height",
                "MCV",
                "Mono",
                "eBMD",
            ],
            features=[
                "Enformer+GPN-MSA+CADD",
            ],
        ),


rule interpretation_eqtl:
    input:
        expand(
            "results/dataset/{dataset}/unsupervised_metrics/{subset}/{features}.csv",
            dataset=["eqtl_matched_1"],
            subset=[
                "all",
                "Whole_Blood",
                "Lung",
                "Brain_Cortex",
                "Liver",
            ],
            features=[
                "Enformer_L2",
                "Borzoi_L2",
                "CADD",
            ],
        )
