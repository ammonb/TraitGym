configfile: "config/config.yaml"

include: "rules/common.smk"
#include: "rules/data/clinvar.smk"
include: "rules/data/gwas.smk"
#include: "rules/data/insights.smk"
include: "rules/data/splicing_assay.smk"
include: "rules/data/caqtl.smk"
include: "rules/data/dsqtl.smk"
include: "rules/data/eqtl.smk"
include: "rules/data/hgmd.smk"
include: "rules/data/gnomad.smk"
include: "rules/data/ldscore.smk"
#include: "rules/data/mendelian.smk"
include: "rules/data/omim.smk"
include: "rules/data/sat_mut_mpra.smk"
include: "rules/data/siraj.smk"
include: "rules/features/alphamissense.smk"
include: "rules/features/cadd.smk"
include: "rules/features/caduceus.smk"
include: "rules/features/conservation.smk"
include: "rules/features/dist.smk"
include: "rules/features/enformer.smk"
include: "rules/features/gpn.smk"
include: "rules/features/gpn_msa.smk"
include: "rules/features/grelu.smk"
include: "rules/features/hyenadna.smk"
include: "rules/features/maf.smk"
include: "rules/features/nucleotide_transformer.smk"
include: "rules/features/sei.smk"
include: "rules/model.smk"


rule all:
    input:
        expand(
            "results/dataset/{dataset}/features/{features}.parquet",
            dataset=config["datasets"],
            features=[
                "Enformer_L2",
                "Borzoi_L2",
                "CADD",
                "GPN-MSA_LLR",
                "GPN-MSA_InnerProducts",

                #"NucleotideTransformer_LLR",
                #"NucleotideTransformer_InnerProducts",

                #"GPN_LLR",
                #"GPN_InnerProducts",
                "GPN_final_LLR",
                "GPN_final_Embeddings",

                #"HyenaDNA_LLR",
                #"HyenaDNA_InnerProducts",

                #"Caduceus_LLR",
                #"Caduceus_InnerProducts",
                "Caduceus_Embeddings",

                #"GPN_v2_all_256_256_512_17_512_checkpoint_10000_LLR",
                #"GPN_v2_v3_512_17_512_checkpoint_10000_LLR",
            ],
        )


rule general_supervised:
    input:
        expand(
            "results/dataset/{dataset}/metrics_by_chrom_weighted_average/{subset}/{feature_set}.{classifier}.chrom.csv",
            dataset=config["datasets"],
            subset=["all"],
            feature_set=[
                "CADD",
                #"Enformer",
                "Borzoi",
                "GPN-MSA",
                #"GPN",
                #"NucleotideTransformer",
                #"HyenaDNA",
                #"Caduceus",
                #"Sei",

                #"CADD+GPN-MSA",
                #"CADD+Borzoi",
                #"GPN-MSA+Borzoi",
                "CADD+GPN-MSA+Borzoi",
            ],
            classifier=[
                "LogisticRegression",
            ]
        ),
        #expand(
        #    "results/dataset/{dataset}/metrics_by_chrom_weighted_average/{subset}/{feature_set}.{classifier}.chrom.subset_from_all.csv",
        #    dataset=config["datasets"],
        #    subset=config["consequence_subsets"],
        #    feature_set=[
        #        "CADD",
        #        "Borzoi",
        #        "GPN-MSA",
        #        "CADD+GPN-MSA+Borzoi",
        #        "CADD+GPN-MSA_LLR+Borzoi_L2_L2",
        #    ],
        #    classifier=[
        #        "LogisticRegression",
        #    ]
        #),


rule mendelian_traits_unsupervised:
    input:
        expand(
            "results/dataset/{dataset}/{metric}/{subset}/{model}.csv",
            dataset=[
                "mendelian_traits_matched_9",
            ],
            metric=[
                "AUPRC_by_chrom_weighted_average",
            ],
            subset=["all"],
            model=[
                "CADD.plus.RawScore",
                "Enformer_L2_L2.plus.all",
                "Borzoi_L2_L2.plus.all",
                "GPN-MSA_LLR.minus.score",

                "GPN_final_LLR.minus.score",
                "GPN_final_EuclideanDistance.plus.score",
                "GPN_final_InnerProduct.minus.score",

                "GPN_final_Embeddings.plus.euclidean_distance",
                "GPN_final_Embeddings.plus.cosine_distance",
                "GPN_final_Embeddings.minus.inner_product",

                #"GPN_LLR.minus.score",
                #"GPN_EuclideanDistance.plus.score",
                #"NucleotideTransformer_LLR.minus.score",
                #"HyenaDNA_LLR.minus.score",
                #"Caduceus_LLR.minus.score",

                #"GPN_v2_all_256_256_512_17_512_checkpoint_10000_LLR.minus.score",
                #"GPN_v2_v3_512_17_512_checkpoint_10000_LLR.minus.score",

                #"Sei.plus.seqclass_max_absdiff",
            ],
        ),


rule complex_traits_unsupervised:
    input:
        expand(
            "results/dataset/{dataset}/{metric}/{subset}/{model}.csv",
            dataset=[
                "complex_traits_proximal_matched_1",
                "complex_traits_distal_matched_1",
                "eqtl_proximal_matched_1",
                "eqtl_distal_matched_1",
                "dsqtl_distal_matched_1",
            ],
            metric=[
                "AUROC_by_gene_weighted_average",
                "AUPRC_by_gene_weighted_average",
            ],
            subset=["all"],
            model=[
                "CADD.plus.RawScore",
                "Enformer_L2_L2.plus.all",
                "Borzoi_L2_L2.plus.all",
                "GPN-MSA_absLLR.plus.score",
                "GPN_final_EuclideanDistance.plus.score",
                #"GPN_absLLR.plus.score",
                #"NucleotideTransformer_absLLR.plus.score",
                #"HyenaDNA_absLLR.plus.score",
                #"Caduceus_absLLR.plus.score",
                #"Sei.plus.seqclass_max_absdiff",
            ],
        ),


rule select_mendelian_traits:
    input:
        expand(
            "results/dataset/{dataset}/metrics_by_chrom_weighted_average/{subset}/{model}.csv",
            dataset=["mendelian_traits_matched_9"],
            subset=select_omim_traits + config["consequence_subsets"],
            model=[
                "CADD.plus.RawScore",
                "Borzoi_L2_L2.plus.all",
                "GPN-MSA_LLR.minus.score",
            ],
        ),
        expand(
            "results/dataset/{dataset}/metrics_by_chrom_weighted_average/{subset}/{feature_set}.{classifier}.chrom.subset_from_all.csv",
            dataset=["mendelian_traits_matched_9"],
            subset=select_omim_traits,
            feature_set=[
                "CADD",
                "Borzoi",
                "GPN-MSA",
                "CADD+GPN-MSA+Borzoi",
                "CADD+GPN-MSA_LLR+Borzoi_L2_L2",
            ],
            classifier=[
                "LogisticRegression",
            ]
        ),


rule select_complex_traits:
    input:
        expand(
            "results/dataset/{dataset}/metrics_by_chrom_weighted_average/{subset}/{model}.csv",
            dataset=["complex_traits_matched_9"],
            subset=(
                select_gwas_traits +
                config["consequence_subsets"] +
                ["disease", "non_disease"]# +
                #config["maf_subsets"]
            ),
            model=[
                "CADD.plus.RawScore",
                "Borzoi_L2_L2.plus.all",
                "GPN-MSA_absLLR.plus.score",
            ],
        ),
        #expand(
        #    "results/dataset/{dataset}/metrics_by_chrom_weighted_average/{subset}/{feature_set}.{classifier}.chrom.subset_from_all.csv",
        #    dataset=["complex_traits_matched_9"],
        #    subset=(
        #        select_gwas_traits +
        #        ["disease", "non_disease"] +
        #        config["maf_subsets"]
        #    ),
        #    feature_set=[
        #        "CADD",
        #        "Borzoi",
        #        "GPN-MSA",
        #        "CADD+GPN-MSA+Borzoi",
        #    ],
        #    classifier=[
        #        "LogisticRegression",
        #    ]
        #),
        #expand(
        #    "results/dataset/{dataset}/metrics_by_chrom_weighted_average/{subset}/{feature_set}.{classifier}.chrom.csv",
        #    dataset=["complex_traits_matched_9"],
        #    subset=["Height", "Mono"],
        #    feature_set=[
        #        "CADD",
        #        "Borzoi",
        #        "GPN-MSA",
        #        "CADD+GPN-MSA+Borzoi",
        #    ],
        #    classifier=[
        #        "LogisticRegression",
        #    ]
        #),


rule interpretation_cadd:
    input:
        expand(
            "results/dataset/{dataset}/unsupervised_metrics/{subset}/{features}.csv",
            dataset=config["datasets"],
            subset=["all"],
            features=["CADD"],
        ),


rule interpretation_borzoi:
    input:
        expand(
            "results/dataset/{dataset}/unsupervised_metrics/{subset}/{features}.csv",
            dataset=["mendelian_traits_matched_9"],
            subset=[
                "613985",
                "306900",
                "143890",
                "614743",
                "250250",
            ],
            features=[
                "Borzoi_L2",
            ],
        ),
        expand(
            "results/dataset/{dataset}/unsupervised_metrics/{subset}/{features}.csv",
            dataset=["complex_traits_matched_9"],
            subset=[
                "Height",
                "Mono",
                "HbA1c",
                "HDLC",
                "Alb",
                "DVT",
            ],
            features=[
                "Borzoi_L2",
            ],
        ),
        expand(
            "results/dataset/{dataset}/metrics_by_chrom_weighted_average/{subset}/Borzoi_L2_L2.plus.{assay}.csv",
            dataset=config["datasets"],
            subset=config["consequence_subsets"] + ["all"],
            assay=["RNA", "CAGE", "ATAC", "DNASE", "CHIP"],
        ),


rule ensemble_light:
    input:
        expand(
            "results/dataset/{dataset}/metrics_by_chrom_weighted_average/{subset}/{feature_set}.{classifier}.chrom.csv",
            dataset=config["datasets"],
            subset=["all"],
            feature_set=[
                "CADD+GPN-MSA_LLR",
                "CADD+Borzoi_L2_L2",
                "CADD+GPN-MSA_LLR+Borzoi_L2_L2",
            ],
            classifier=[
                "LogisticRegression",
            ]
        ),


rule extra_unsupervised:
    input:
        expand(
            "results/dataset/{dataset}/unsupervised_metrics/{subset}/{features}.csv",
            dataset=[
                "complex_traits_all",
            ],
            subset=[
                "all",
                "maf_0.00_0.05",
                "maf_0.05_0.50",

                "maf_0.0_0.01",
                "maf_0.0_0.1",
                "maf_0.1_0.2",
                "maf_0.2_0.3",
                "maf_0.3_0.4",
                "maf_0.4_0.5",
            ],
            features=[
                "CADD",
                "GPN-MSA_absLLR",
                "GPN_absLLR",
            ],
        ),
        expand(
            "results/dataset/{dataset}/unsupervised_metrics/{subset}/{features}.csv",
            dataset=[
                "mendelian_traits_all",
            ],
            subset=["all"],
            features=[
                "CADD",
                "GPN-MSA_LLR",
                "GPN_LLR",
            ],
        ),


gpn_models = [
    #"v2_v3_512_17_512",
    #"v2_v3_patched_512_17_512",

    #"v2_bytenet_v4_512_16_256",
    #"v2_bytenet_v5_512_16_256",
    #"v2_bytenet_v6_512_16_256",
    #"v2_bytenet_v7_512_16_256",
    #"v2_bytenet_v8_512_16_256",

    #"v2_bytenet_v6_256_16_256",

    #"v4_v6_512_16_256",
    #"v4_v6_512_32_512",
    "v4_v6_512_64_1024",

    #"v2_all_256_256_512_17_512",
    #"v2_all_256_256_512_25_768",
]

gpn_checkpoints = [
    #10000,
    #20000,
    #30000,
    #50000,
    #100000,
    #150000,
    #200000,
    #250000,
    370000,
]

rule gpn_experiments:
    input:
        expand(
            "results/dataset/{dataset}/metrics_by_chrom_weighted_average/{subset}/GPN_{model}_checkpoint_{checkpoint}_{score}.csv",
            #dataset=["mendelian_traits_matched_9"],
            dataset=["mendelian_traits_v2_nonexonic_matched_1"],
            #subset=["all"] + config["consequence_subsets"],
            subset=["all", "proximal", "distal"],
            model=gpn_models,
            checkpoint=gpn_checkpoints,
            score=[
                "LLR.minus.score",
                #"InnerProduct.minus.score",
                "EuclideanDistance.plus.score",
                #"CosineSimilarity.minus.score",
                #"MeanEuclideanDistance.plus.score",
                #"MeanCosineSimilarity.minus.score",
                "Influence.plus.score",
            ],
        ),
        expand(
            "results/dataset/{dataset}/metrics_by_chrom_weighted_average/{subset}/GPN_{model}_checkpoint_{checkpoint}_{score}.csv",
            #dataset=["complex_traits_matched_9"],
            dataset=["complex_traits_v2_nonexonic_matched_1"],
            #subset=["all"] + config["consequence_subsets"],
            subset=["all", "proximal", "distal"],
            model=gpn_models,
            checkpoint=gpn_checkpoints,
            score=[
                "absLLR.plus.score",
                #"InnerProduct.minus.score",
                "EuclideanDistance.plus.score",
                #"CosineSimilarity.minus.score",
                #"MeanEuclideanDistance.plus.score",
                #"MeanCosineSimilarity.minus.score",
                "Influence.plus.score",
            ],
        ),
        #expand(
        #    "results/dataset/{dataset}/features/GPN_{model}_checkpoint_{checkpoint}_{feature}.parquet",
        #    dataset=config["datasets"],
        #    #dataset=["mendelian_traits_matched_9"],
        #    model=gpn_models,
        #    checkpoint=gpn_checkpoints,
        #    feature=[ 
        #        #"LLR",
        #        #"InnerProducts",
        #        "EuclideanDistance",
        #        #"MeanEuclideanDistance",
        #    ],
        #),
        #expand(
        #    "results/dataset/{dataset}/metrics_by_chrom_weighted_average/{subset}/GPN_{model}_checkpoint_{checkpoint}.LogisticRegression.chrom.csv",
        #    dataset=config["datasets"],
        #    subset=["all"],
        #    model=gpn_models,
        #    checkpoint=gpn_checkpoints,
        #),
        #expand(
        #    "results/dataset/{dataset}/metrics_by_chrom_weighted_average/{subset}/GPN_{model}_checkpoint_{checkpoint}.LogisticRegression.chrom.subset_from_all.csv",
        #    dataset=config["datasets"],
        #    subset=config["consequence_subsets"],
        #    model=gpn_models,
        #    checkpoint=gpn_checkpoints,
        #),


        #expand(
        #    "results/dataset/{dataset}/metrics_by_chrom_weighted_average/{subset}/{model}.csv",
        #    dataset=["mendelian_traits_matched_9"],
        #    subset=["all"] + config["consequence_subsets"],
        #    model=[
        #        "GPN-MSA_LLR.minus.score",
        #        "GPN-MSA_InnerProduct.minus.score",
        #        "GPN-MSA_EuclideanDistance.plus.score",
        #        "GPN-MSA_Influence.plus.score",
        #    ],
        #),
        #expand(
        #    "results/dataset/{dataset}/metrics_by_chrom_weighted_average/{subset}/{model}.csv",
        #    dataset=["complex_traits_matched_9"],
        #    subset=["all"] + config["consequence_subsets"],
        #    model=[
        #        "GPN-MSA_absLLR.plus.score",
        #        "GPN-MSA_InnerProduct.minus.score",
        #        "GPN-MSA_EuclideanDistance.plus.score",
        #        "GPN-MSA_Influence.plus.score",
        #    ],
        #),
